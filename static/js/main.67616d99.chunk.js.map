{"version":3,"sources":["mo.png","mi.png","Graph.js","GraphVisualizer.js","MatrixInput.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Graph","maxLevel","saveState","saved","this","_maxLevel","_nodes","_adjList","_saveState","_saved","save","key","nodes","Object","keys","push","id","_key","label","title","edges","values_3_edges","values_4_edges","values_5_edges","values_6_edges","values_7_edges","values_8_edges","color","randomHexColor","i","edge","array_to_use","length","from","highlight","to","_toNode","_value","smooth","enabled","type","roundness","width","shadow","selectionWidth","font","size","strokeColor","strokeWidth","bold","node","node1","node2","value","Edge","path","rootKey","NodeKey","sort","a","b","_level","result","position","positionResult","advance","currentKey","keyChain","edgesChain","_id","processed","unProcess","keyChainPath","edgeChainPath","Node","level","lastLevel","_lastLevel","_processed","GraphHelpers","graph","targeLevel","targetId","e","process","GraphVisualizer","props","handleClickForward","selected","network","selectEdges","setState","nodesMessage","join","edgesMessage","map","split","handleClickBackward","initZeroPath","onNodesOfCurrentLevelChange","currentLevel","target","onNodesOfCurrentLevelClick","state","prevLevel","saveGraph","new_data","getSavedStatus","alert","setSavedState","JSON","parse","localStorage","getItem","Date","toString","getSaveState","setItem","stringify","helpers","count","getPathFromRoot","canAdvanceAndReachRoot","filter","array","includes","c_edges","getEdges","message","getNodes","options","layout","hierarchical","direction","sortMethod","nodeSpacing","arrows","chosen","values","hovering","height","window","innerHeight","borderWidth","borderWidthSelected","brokenImage","undefined","border","background","hover","fixed","x","y","hideNodes","onClick","className","readOnly","rows","cols","style","left","bottom","zIndex","backgroundColor","fontSize","getNetwork","React","Component","MatrixInput","levelsOnChange","levels","currentTarget","levelsCount","Level","levelCount","name","placeholder","onChange","changeReloadState","reload","parseInt","display","alignItems","justifyContent","col","j","margin","setEdgesString","createLevels","finalButtonDisabled","submitButtonDisabled","pushed","temp","LevelrsArray","passToParent","pass","setMatrixFromInput","edgeValues","dims","clone","Promise","resolve","arr1","newLevels","_","cloneDeep","edgeString","createArray","newEdgeArrays","trigger","verticalAlign","src","mi","mo","href","disabled","App","getSavedGraphsList","File","FileReader","FileList","Blob","file","document","querySelector","files","reader","match","onload","event","new_saved_graphs","savedGraphs","setSavedGraphsList","readAsText","elements","element","c_graph","new_m","marginLeft","nonEditedSavedGraphs","savedGraphElements","downloadGraphs","myData","fileName","blob","URL","createObjectURL","link","download","m","save_state","unshift","index","matrix","nodesCountInLevel","nodeCount","addNodes","edgeArr","mn","new_val","addEdge","getNode","Boolean","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"+FAAAA,EAAOC,QAAU,IAA0B,gC,oBCA3CD,EAAOC,QAAU,IAA0B,gC,+UCErCC,E,WACJ,aAAgD,IAApCC,EAAmC,uDAAxB,KAAMC,EAAkB,uCAAPC,EAAO,2DAC7CC,KAAKC,UAAYJ,EACjBG,KAAKE,OAAS,GACdF,KAAKG,SAAW,GAChBH,KAAKI,WAAaN,EAClBE,KAAKK,OAASN,E,6DAId,OAAOC,KAAKK,S,oCAGAC,GACZN,KAAKK,OAASC,I,qCAId,OAAON,KAAKI,a,8BAGNG,GACN,OAAOP,KAAKE,OAAOK,K,iCAKnB,IADA,IAAMC,EAAQ,GACd,MAAgBC,OAAOC,KAAKV,KAAKE,QAAjC,eAA0C,CAArC,IAAIK,EAAG,KACVC,EAAMG,KAAK,CACTC,GAAIZ,KAAKE,OAAOK,GAAKM,KAAKN,IAC1BO,MAAOd,KAAKE,OAAOK,GAAKM,KAAKN,IAC7BQ,MAAOf,KAAKE,OAAOK,GAAKM,KAAKN,MAIjC,OAAOC,I,iCAWP,IAPA,IAAMQ,EAAQ,GACRC,EAAiB,EAAE,GAAK,EAAG,IAC3BC,EAAiB,EAAE,IAAM,GAAK,GAAK,IACnCC,EAAiB,EAAE,IAAM,IAAM,GAAK,EAAG,IACvCC,EAAiB,EAAE,IAAM,IAAM,GAAK,EAAG,GAAK,IAC5CC,EAAiB,EAAE,IAAM,IAAM,GAAK,EAAG,GAAK,GAAK,IACjDC,EAAiB,EAAE,IAAM,IAAM,GAAK,EAAG,GAAK,GAAK,GAAK,IAC5D,MAAgBb,OAAOC,KAAKV,KAAKG,UAAjC,eAA4C,CAAvC,IAAuC,EAAnCI,EAAG,KACJgB,EAAQC,MACVC,EAAI,EAFkC,cAGzBzB,KAAKG,SAASI,IAHW,IAG1C,2BAAqC,CAAC,IAA7BmB,EAA4B,QAC/BC,OAAY,EAChB,OAAQ3B,KAAKG,SAASI,GAAKqB,QACzB,KAAK,EACHD,EAAeV,EACf,MACF,KAAK,EACHU,EAAeT,EACf,MACF,KAAK,EACHS,EAAeR,EACf,MACF,KAAK,EACHQ,EAAeP,EACf,MACF,KAAK,EACHO,EAAeN,EACf,MACF,KAAK,EACHM,EAAeL,EACf,MACF,QACEK,EAAeV,EAInBD,EAAML,KAAK,CACTkB,KAAMtB,EACNgB,MAAO,CACLA,MAAOA,EACPO,UAAW,SAEbC,GAAIL,EAAKM,QAAQnB,KAAKN,IACtBO,MAAM,GAAD,OAAKY,EAAKO,QACflB,MAAM,GAAD,OAAKW,EAAKO,QACfrB,GAAG,GAAD,OAAKL,EAAL,YAAYmB,EAAKO,OAAjB,YAA2BP,EAAKM,QAAQnB,KAAKN,KAC/C2B,OAAQ,CACNC,SAAS,EACTC,KAAM,YACNC,UAAWV,EAAaF,IAE1Ba,MAAO,EACPC,OAAQ,CAAEJ,SAAS,GACnBK,eAAgB,EAChBC,KAAM,CACJC,KAAM,GACNnB,MAAOA,EACPoB,YAAa,QACbC,YAAa,EACbC,MAAK,KAGTpB,KAvDwC,+BA2D5C,OAAOT,I,+BAGAR,GAAQ,IAAD,gBACGA,GADH,IACd,2BAAwB,CAAC,IAAhBsC,EAAe,QACtB9C,KAAKE,OAAO4C,EAAKjC,KAAKN,KAAOuC,EAC7B9C,KAAKG,SAAS2C,EAAKjC,KAAKN,KAAO,IAHnB,iC,8BAORwC,EAAOC,EAAOC,GACpBjD,KAAKG,SAAS4C,EAAMlC,KAAKN,KAAKI,KAAK,IAAIuC,EAAKF,EAAOC,M,6CAI9BE,GACrB,IAAMC,EAAU,IAAIC,EAAQ,EAAG,GAG/BF,EAAKG,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,OAASD,EAAEC,UAEjC,IAN2B,EAMvBC,EAAS,GANc,cAQNP,GARM,IAQ3B,2BAA2B,CAAC,IAAnBQ,EAAkB,QACzB,GAAwB,IAApBA,EAASF,OAAb,CAKA,IAAIG,EAAiB5D,KAAK6D,QAAQT,EAASO,EAAU,GAAI,GAAID,GAC7D,IAAKE,IAAmBA,EAAehC,OAErC,MAAO,KAjBgB,8BAqB3B,OAAO8B,I,8BAGDN,EAASU,EAAYC,EAAUC,EAAYN,GAEjD,GAAII,EAAWL,SAAWL,EAAQK,OAChC,OAAIK,EAAWG,MAAQb,EAAQa,MAI/BP,EAAO/C,KAAK,CAACoD,EAAUC,KAEhB,GAIT,IAbyD,EAarDhD,EAAQ,GAb6C,cAcxChB,KAAKG,SAAS2D,EAAWvD,MAde,IAczD,2BAAgD,CAAC,IAAxCmB,EAAuC,QAC1CA,EAAKM,QAAQnB,KAAK4C,SAAWK,EAAWL,OAAS,GACnDzC,EAAML,KAAKe,IAhB0C,8BAmBzDV,EAAMsC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEtB,OAASuB,EAAEvB,UAElC,cAAiBjB,EAAjB,eAAwB,CAAnB,IAAIU,EAAI,KACX,GAAIA,EAAKwC,UACPxC,EAAKyC,gBADP,CAKA,IAAIC,EAAY,sBAAOL,GAAP,CAAiBD,EAAWvD,IAAKmB,EAAKM,QAAQnB,KAAKN,MAC/D8D,EAAa,sBACZL,GADY,WAEZF,EAAWvD,IAFC,YAEMmB,EAAKO,OAFX,YAEqBP,EAAKM,QAAQnB,KAAKN,OAExDP,KAAK6D,QACHT,EACA1B,EAAKM,QAAQnB,KACbuD,EACAC,EACAX,IAIJ,OAAO,M,KAILY,EACJ,WAAYC,EAAO3D,GAAwB,IAApB4D,EAAmB,4EACxCxE,KAAKa,KAAO,IAAIwC,EAAQkB,EAAO3D,GAC/BZ,KAAKyE,WAAaD,GAIhBtB,E,WACJ,WAAYJ,EAAMG,GAA2B,IAApBiB,EAAmB,4EAC1ClE,KAAKgC,QAAUc,EACf9C,KAAKiC,OAASgB,EACdjD,KAAK0E,WAAaR,E,sDAIlBlE,KAAK0E,YAAa,I,kCAIlB1E,KAAK0E,YAAa,I,iCAIlB,MAAM,GAAN,OAAU1E,KAAKgC,QAAQzB,IAAvB,YAA8BP,KAAKiC,Y,KAIjCoB,E,WACJ,WAAYkB,EAAO3D,GAAK,oBACtBZ,KAAKyD,OAASc,EACdvE,KAAKiE,IAAMrD,E,gDAIX,MAAM,GAAN,OAAUZ,KAAKyD,OAAf,YAAyBzD,KAAKiE,S,KAI5BU,E,wGACYC,EAAOC,EAAYC,GAMjC,IALA,IAGIpD,EAHA6C,EAAQ,EAERpB,EAAO,GAGJoB,GAASM,GAAY,CAAC,IAAD,gBACZD,EAAMzE,SAAN,UAAkBoE,EAAlB,QADY,IAC1B,2BAA4C,CAAC,IAApCQ,EAAmC,QAC1C,GAAiB,IAAbA,EAAE9C,QAAgB8C,EAAE/C,QAAQnB,KAAK4C,SAAWc,EAAQ,EAAG,CACzD7C,EAAOqD,EACP,QAJsB,8BAQd,MAARrD,GACFA,EAAKsD,UAGP7B,EAAKxC,KAAK,IAAI0C,EAAQkB,IAAS,IAGjC,OAAOpB,M,KCtBI8B,G,yDA/Nb,WAAYC,GAAQ,IAAD,uBACjB,cAAMA,IAwERC,mBAAqB,WACnB,GAAI,EAAKxB,UAAY,EAAKD,OAAO9B,OAAS,EAA1C,CAIA,EAAK+B,WAEL,IAAMyB,EAAW,CACf5E,MAAO,EAAKkD,OAAO,EAAKC,UAAU,GAClC3C,MAAO,EAAK0C,OAAO,EAAKC,UAAU,IAGpC,EAAK0B,QAAQC,YAAYF,EAASpE,OAElC,EAAKuE,SAAS,CACZC,aAAcJ,EAAS5E,MAAMiF,KAAK,MAClCC,aAAcN,EAASpE,MAAM2E,KAAI,SAACZ,GAAD,OAAOA,EAAEa,MAAM,KAAK,MAAIH,KAAK,UAzF/C,EA6FnBI,oBAAsB,WACpB,GAAsB,IAAlB,EAAKlC,YACL,EAAKA,UAAY,EAAKD,OAAO9B,QAAjC,CAIA,EAAK+B,WAEL,IAAMyB,EAAW,CACf5E,MAAO,EAAKkD,OAAO,EAAKC,UAAU,GAClC3C,MAAO,EAAK0C,OAAO,EAAKC,UAAU,IAIpC,EAAK0B,QAAQC,YAAYF,EAASpE,OAGlC,EAAKuE,SAAS,CACZC,aAAcJ,EAAS5E,MAAMiF,KAAK,MAClCC,aAAcN,EAASpE,MAAM2E,KAAI,SAACZ,GAAD,OAAOA,EAAEa,MAAM,KAAK,MAAIH,KAAK,UAhH/C,EAoHnBK,aAAe,WACb,IAAMV,EAAW,CACf5E,MAAO,EAAKkD,OAAO,GAAG,GACtB1C,MAAO,EAAK0C,OAAO,GAAG,IAGxB,EAAK2B,QAAQC,YAAYF,EAASpE,OAElC,EAAKuE,SAAS,CACZC,aAAcJ,EAAS5E,MAAMiF,KAAK,MAClCC,aAAcN,EAASpE,MAAM2E,KAAI,SAACZ,GAAD,OAAOA,EAAEa,MAAM,KAAK,MAAIH,KAAK,SA9H/C,EAkInBM,4BAA8B,SAAChB,GAC7B,EAAKQ,SAAS,CACZS,aAAcjB,EAAEkB,OAAOhD,SApIR,EAwInBiD,2BAA6B,SAACnB,GACV,EAAKoB,MAAMC,UAA7B,IACMJ,EAAe,EAAKG,MAAMH,aAEhC,EAAKT,SAAS,CACZa,UAAWJ,EACXA,aAAc,KA9IC,EAoJnBK,UAAY,SAACtB,GAQX,IAAIuB,EAPD,EAAK1B,MAAM2B,iBACZC,MAAM,sCAIR,EAAK5B,MAAM6B,eAAc,IAMvBH,EAHEI,KAAKC,MAAMC,aAAaC,QAAQ,gBAGtBH,KAAKC,MAAMC,aAAaC,QAAQ,gBAFjC,KAKM,IAAIC,MACHC,YAAc,EAAKnC,MAAMoC,eAC7CJ,aAAaK,QAAQ,cAAeP,KAAKQ,UAAUZ,MAnKnD,IAAMa,EAAU,IAAIxC,EACpB,EAAK9E,SAAW,EAAKqF,MAAMkC,MAC3B,EAAKxC,MAAQ,EAAKM,MAAMN,MACxB,EAAKzB,KAAOgE,EAAQE,gBAAgB,EAAKzC,MAAO,EAAK/E,SAAU,GAC/D,EAAK6D,OAAS,EAAKkB,MAChB0C,uBAAuB,EAAKnE,MAC5BoE,QAAO,SAACC,GACP,OAAOA,EAAM,GAAG,GAAGC,SAAS,EAAK5H,SAASkH,eAI9C,EAAKpD,SAAW,EAChB,IAAI+D,EAAU,EAAK9C,MAAM+C,WAdR,OAejB,EAAKxB,MAAQ,CACXH,aAAc,EACdI,UAAW,EACXwB,QAAS,GACThD,MAAO,CACLpE,MAAO,EAAKoE,MAAMiD,WAClB7G,MAAO0G,GAETI,QAAS,CACPC,OAAQ,CACNC,aAAc,CACZC,UAAW,KACXC,WAAY,WACZC,YAAa,MAGjBnH,MAAO,CACLoH,OAAQ,CAAErG,GAAI,CAAEI,SAAS,IAEzBkG,OAAQ,CACNvH,MAAO,SAAUwH,EAAQ1H,EAAIwE,EAAUmD,GACrCD,EAAO/G,MAAQ,MACf+G,EAAO1F,YAAc,EACrB0F,EAAO3F,YAAc,YAI3B6F,OAASC,OAAOC,YAAa3B,WAC7BvG,MAAO,CACLmI,YAAa,EACbC,oBAAqB,EACrBC,iBAAaC,EACbT,QAAQ,EACR9G,MAAO,CACLwH,OAAQ,UACRC,WAAY,OACZlH,UAAW,CACTiH,OAAQ,MACRC,WAAY,OAEdC,MAAO,CACLF,OAAQ,UACRC,WAAY,YAGhBE,MAAO,CACLC,GAAG,EACHC,GAAG,MAMX,EAAKjD,MAAMX,aAAe,yBAC1B,EAAKW,MAAMT,aAAe,GAC1B,EAAKS,MAAMkD,WAAY,EAtEN,E,qDAwKT,IAAD,OACP,OACE,oCACE,6BACE,wBAAIzI,GAAG,QAAP,gBAIF,4BAAQ0I,QAAStJ,KAAKqG,UAAWzF,GAAG,eAApC,gBAIA,yBACE2I,UAAU,gBAEV,yDACA,4BAAQA,UAAU,SAASD,QAAStJ,KAAK6F,qBAAzC,YAGA,4BAAQ0D,UAAU,SAASD,QAAStJ,KAAKmF,oBAAzC,SAKF,8BACEqE,UAAU,EACV1I,MAAM,WACN2I,KAAM,EACNC,KAAM,EACNC,MAAO,CACLhG,SAAU,WACViG,KAAM,KACNC,OAAQ,MACRC,OAAQ,EACRxH,MAAO,QACPyH,gBAAiB,mBACjBxI,MAAM,QACNyI,SAAU,SAEZ/G,MAAO,WAAkBjD,KAAKmG,MAAMX,aAAe,KAAOxF,KAAKmG,MAAMT,eAGvE,kBAAC,IAAD,CACEd,MAAO5E,KAAKmG,MAAMvB,MAClBkD,QAAS9H,KAAKmG,MAAM2B,QACpBmC,WAAY,SAAC5E,GACX,EAAKA,QAAUA,EACf,EAAKS,uB,GAxNaoE,IAAMC,Y,iFCsSrBC,E,kDAlSb,WAAYlF,GAAQ,IAAD,8BACjB,cAAMA,IAoBRmF,eAAiB,SAACtF,GAChB,IAAIuF,EAASvF,EAAEwF,cAActH,MAAQ,EACrC,EAAKsC,SAAS,CAAEiF,YAAaF,KAvBZ,EAoEnBG,MAAQ,SAACC,GACP,IAAIvB,EACAC,EAEJ,OACE,yBAAK7I,IAAKmK,EAAYnB,UAAU,eAC9B,uBAAGA,UAAU,SAAb,gBACEmB,EAAa,EADf,YAEIA,EAFJ,wBAGA,6BACE,oCAEE,2BACEtI,KAAK,SACLuI,KAAK,IACLC,YAAW,4BAAuBF,EAAa,GAC/CG,SAAU,SAAC9F,GAAO,IAAD,EACSA,EAAEwF,cAAZtH,GADC,EACP0H,KADO,EACD1H,OACdkG,EAAIlG,MAIV,oCAEE,2BACEb,KAAK,SACLuI,KAAK,IACLC,YAAW,4BAAuBF,GAClCG,SAAU,SAAC9F,GAAO,IAAD,EACSA,EAAEwF,cAAZtH,GADC,EACP0H,KADO,EACD1H,OACdmG,EAAInG,MAIV,4BACE0G,MAAO,CAAEpI,MAAO,SAChB+H,QAAS,WACP,EAAKwB,kBAAkB3B,EAAGC,EAAGsB,KAHjC,QASF,6BACG,EAAKvE,MAAM4E,OAAOC,SAASN,IAAa/E,KAAI,SAAC8D,EAAMhI,GAAP,OAC3C,yBAAKlB,IAAG,UAAKkJ,EAAL,aAAchI,GACpBkI,MAAO,CACLsB,QAAS,OACTC,WAAY,SACZC,eAAgB,WAGjB1B,EAAK9D,KAAI,SAACyF,EAAKC,GAAN,OACR,yBAAK9K,IAAG,UAAK6K,EAAL,aAAaC,IACnB,2BACET,YAAW,UAAKnJ,EAAL,YAAU4J,GACrBjJ,KAAK,OACLyI,SAAU,SAAC9F,GAAD,OACR,EAAKkC,QACHyD,EACAjJ,EACA4J,EACAL,SAASjG,EAAEwF,cAActH,oBASzC,6BACE,uBAAG0G,MAAO,CAAE2B,OAAQ,QAApB,yFAEuB,KAEtB,EAAKnF,MAAM4E,OAAOC,SAASN,IAAa/E,KAAI,SAAC8D,EAAMhI,GAAP,OAC3C,yBAAKlB,IAAG,UAAKkJ,EAAL,aAAchI,IACnB,IACD,yBACEkI,MAAO,CACLsB,QAAS,OACTC,WAAY,SACZC,eAAgB,WAGlB,2BACEP,YAAW,iBAAYnJ,EAAZ,mBAAwBiJ,EAAa,GAChDtI,KAAK,OACLyI,SAAU,SAAC9F,GAAD,OACR,EAAKwG,eAAeb,EAAYjJ,EAAGsD,EAAEwF,cAActH,kBA9JlD,EAyKnBuI,aAAe,WAGb,GAFA,EAAKjG,SAAS,CAAEkG,qBAAqB,IACrC,EAAKlG,SAAS,CAAEmG,sBAAsB,KACjC,EAAKvF,MAAMwF,OAAQ,CAEtB,IADA,IAAIC,EAAO,GACFnK,EAAI,EAAGA,EAAI,EAAK0E,MAAMqE,YAAa/I,IAC1CmK,EAAKjL,KAAK,IAGZ,EAAK4E,SAAS,CAAEwF,OAAQa,IAAQ,WAE9B,IADA,IAAIC,EAAe,GACVpK,EAAI,EAAGA,EAAI,EAAK0E,MAAMqE,YAAa/I,IAC1CoK,EAAalL,KAAK,EAAK8J,MAAMhJ,IAE/B,EAAK8D,SAAS,CAAE+E,OAAQuB,OAE1B,EAAK1F,MAAMwF,QAAS,IAzLL,EA6LnBG,aAAe,YAEbC,EADa,EAAK7G,MAAM8G,oBACnB,EAAK7F,MAAM4E,OAAQ,EAAK5E,MAAMqE,YAAa,EAAKrE,MAAM8F,YAAY,IA7LvE,EAAK9F,MAAQ,CACX+F,KAAM,CAAE/C,EAAG,EAAGC,EAAG,GACjB2B,OAAQ,GACRP,YAAa,EACbmB,QAAQ,EACRrB,OAAQ,GACR2B,WAAY,GACZR,qBAAqB,EACrBC,sBAAsB,GAVP,E,oDAcXhB,EAAYvB,EAAGC,EAAGnG,GACxB,IAAMkJ,EAAQnM,KAAKmG,MAAM4E,OACzBoB,EAAMzB,GAAYvB,GAAGC,GAAKnG,EAE1BjD,KAAKuF,SAAS,CAAEwF,OAAQoB,M,2EAQRhD,EAAGC,EAAGsB,G,qGACf,IAAI0B,SAAQ,SAACC,GAElB,IADA,IAAIC,EAAO,GACF7K,EAAI,EAAGA,EAAI0H,EAAG1H,IAAK,CAC1B6K,EAAK3L,KAAK,IACV,IAAK,IAAI0K,EAAI,EAAGA,EAAIjC,EAAGiC,IACrBiB,EAAK7K,GAAGd,KAAK,MAIjB,IAAI4L,EAAY,QACazD,IAAzB,EAAK3C,MAAM4E,OAAO,GACpBwB,EAAU7B,GAAc4B,GAExBC,EAAYC,IAAEC,UAAU,EAAKtG,MAAM4E,SACzBL,GAAc4B,EAG1BD,EAAQE,O,oLAIS7B,EAAYjJ,EAAGiL,G,8EAC5BP,EAAQnM,KAAKmG,MAAM8F,YAEnBvB,GAAYjJ,GAAKiL,E,SACjB1M,KAAKuF,SAAS,CAAE0G,WAAYE,I,4LAGZhD,EAAGC,EAAGsB,G,uFACtB1K,K,SAA8BA,KAAK2M,YAAYxD,EAAGC,EAAGsB,G,gCAArCK,O,oBAAXxF,S,uBAGX,IAFIqH,EAAgB,GAChBf,EAAe,GACVpK,EAAI,EAAGA,EAAIzB,KAAKmG,MAAMqE,YAAa/I,IAC1CoK,EAAalL,KAAKX,KAAKyK,MAAMhJ,IAE7BmL,EAAcjM,KAAK,IAGrBX,KAAKuF,SAAS,CAAE+E,OAAQuB,EAAcI,WAAYW,I,2IAkIlD,OACE,6BACE,kBAAC,IAAD,CAAaC,QAAQ,6CACnB,6BACA,6BACA,yBAAKtD,UAAU,gBACb,qFACA,yBAAKA,UAAU,YACb,4BACE,4LAKA,sMAKA,4FAGA,uKAKA,mGAMJ,wBAAII,MAAO,CAAEsB,QAAS,SAAUK,OAAQ,SAAxC,YACA,yBAAK3B,MAAO,CAAErH,MAAO,QAASwK,cAAe,UAAYC,IAAKC,MAC9D,wBAAIrD,MAAO,CAAEsB,QAAS,SAAUK,OAAQ,SAAxC,aACA,yBAAK3B,MAAO,CAAErH,MAAO,QAASwK,cAAe,UAAYC,IAAKE,MAC9D,gGAGA,0IAKA,mCACQ,IACN,uBACEtD,MAAO,CAAEpI,MAAO,SAChB2L,KAAK,iCAFP,MAKK,IAPP,gCAaJ,6BACA,6BACA,6BAEA,yBAAK3D,UAAU,UACb,yCAEE,2BACEnH,KAAK,SACLuI,KAAK,IACLE,SAAU7K,KAAKqK,iBAEjB,4BACEf,QAAStJ,KAAKwL,aACd2B,SAAUnN,KAAKmG,MAAMuF,qBACrB/B,MAAO,CAAE2B,OAAQ,QAHnB,WAQDtL,KAAKmG,MAAMmE,OAAStK,KAAKmG,MAAMmE,OAAS,+CACzC,6BACA,4BACEhB,QAAStJ,KAAK8L,aACdqB,SAAUnN,KAAKmG,MAAMsF,oBACrB9B,MAAO,CAAE2B,OAAQ,QAHnB,yB,GApRgBpB,IAAMC,WCmMjBiD,E,kDApMb,WAAYlI,GAAQ,IAAD,8BACjB,cAAMA,IAmBRmI,mBAAqB,WACnB,GAAI5E,OAAO6E,MAAQ7E,OAAO8E,YAAc9E,OAAO+E,UAAY/E,OAAOgF,KAAM,CACtE,IAAIC,EAAOC,SAASC,cAAc,oBAAoBC,MAAM,GACxDC,EAAS,IAAIP,WAIbG,EAAKtL,KAAK2L,MAFC,UAGbD,EAAOE,OAAS,SAACC,GACf,IAAMC,EAAgB,2BAAO,EAAK/H,MAAMgI,aAAgBzH,KAAKC,MAAMsH,EAAMhI,OAAOvC,SAChFkD,aAAaK,QACX,cACAP,KAAKQ,UAAUgH,IAEjB,EAAK3I,SACH,CACE4I,YAAaD,GAEf,EAAKE,qBAIT5H,MAAM,yBAERsH,EAAOO,WAAWX,QAElBlH,MAAM,uDA9CS,EAkDnB4H,mBAAqB,WACnB,IAAIE,EAAW,GADU,WAEd1J,GAIT,IAAM2J,EACJ,wBAAIhO,IAAKqE,GACP,uBACE0E,QAAS,WACP,IAAMkF,EAAU,EAAKrI,MAAMgI,YAAYvJ,GACvC,EAAKoH,mBACHwC,EAAQC,MACRD,EAAQpH,MACRoH,EAAQvC,YACR,KAIHrH,GAEH,4BACE+E,MAAO,CAAE+E,WAAY,QACrBpF,QAAS,WACP,IAAIqF,EAAuB,EAAKxI,MAAMgI,mBAC/BQ,EAAqB/J,GAC5BgC,aAAaK,QACX,cACAP,KAAKQ,UAAUyH,IAEjB,EAAKpJ,SACH,CACE4I,YAAaQ,GAEf,EAAKP,sBAbX,WAsBJE,EAAS3N,KAAK4N,IAzChB,IAAK,IAAM3J,KAAS,EAAKuB,MAAMgI,YAAc,EAAlCvJ,GA4CX,EAAKW,SAAS,CAAEqJ,mBAAoBN,GAAY,EAAKO,iBAhGpC,EAmGnBA,eAnGmB,sBAmGF,oCAAAtL,EAAA,6DACTuL,EAASpI,KAAKQ,UAAU,EAAKf,MAAMgI,aAEnCY,EAAW,WACXC,EAAO,IAAIvB,KAAK,CAACqB,GAAS,CAAE1M,KAAM,qBAJzB,SAKI6M,IAAIC,gBAAgBF,GALxB,OAKT9B,EALS,OAMTiC,EAAO,CACX,uBAAG5O,IAAK,WAAY6O,SAAUL,EAAW,OAAQ7B,KAAMA,GAAvD,oBAIF,EAAK3H,SAAS,CAAE6J,SAAUD,IAXX,2CAnGE,EAiHnBnD,mBAjHmB,uCAiHE,WAAOqD,EAAGjI,EAAO6E,EAAYlM,GAA7B,6CAAAwD,EAAA,sDAEdxD,EAIHuP,EAAa,MAHPb,EAAQ/H,KAAKC,MAAMD,KAAKQ,UAAUmI,IACxCC,EAAa,CAAEb,QAAOrH,QAAO6E,eAK/BoD,EAAEE,QAAQ,CAAC,KACL3K,EAAQ,IAAIhF,EAAMwH,EAAOkI,EAAYvP,GACvCyP,EAAQ,EAXO,cAYAH,GAZA,yDAcjB,IAFOI,EAZU,QAaXC,EAAoBD,EAAO7N,OACxB+N,EAAY,EAAGA,EAAYD,IAAqBC,EACnD7M,EAAO,IAAIwB,EAAKkL,EAAOG,EAAWvI,IAAUoI,GAChD5K,EAAMgL,SAAS,CAAC9M,IAhBD,GAmBH,IAAV0M,EAnBa,yBAoBbA,EApBa,gCAyBjB,IAAS/N,EAAI,EAAGA,EAAIgO,EAAO7N,OAAQH,IAIjC,IAHIwB,EAAQ,EACR4M,EAAU5D,EAAWuD,EAAQ,GAAG/N,GAAGmE,MAAM,KAEpCyF,EAAI,EAAGA,EAAIoE,EAAOhO,GAAGG,OAAQyJ,IACpC,IAASyE,EAAK,EAAGA,EAAKL,EAAOhO,GAAG4J,GAAIyE,IAC5BC,EAAU/E,SAAS6E,EAAQ5M,IACjC2B,EAAMoL,QACJpL,EAAMqL,QAAN,UAAiBT,EAAjB,YAA0B/N,IAC1BmD,EAAMqL,QAAN,UAAiBT,EAAQ,EAAzB,YAA8BnE,IAC9B0E,GAAoB,GAEtB9M,MAIJuM,EAzCe,+IA4CnB,EAAKjK,SAAS,CAAEiF,YAAapD,EAAOxC,MAAOA,IA5CxB,gEAjHF,4DAEjB,EAAKuB,MAAQ,CACXvB,MAAO,GACP4F,YAAa,EACb2D,YAAa,GACbS,mBAAoB,GACpBQ,SAAU,IAPK,E,gEAYjBpP,KAAKuF,SACH,CACE4I,YAAazH,KAAKC,MAAMC,aAAaC,QAAQ,iBAE/C7G,KAAKoO,sB,+BAiJP,OACE,6BAC8B,GAA3BpO,KAAKmG,MAAMvB,MAAMhD,OAChB,kBAAC,EAAD,CACE6N,OAAQzP,KAAKmG,MAAMqB,MACnBwE,mBAAoBhM,KAAKgM,qBAEzB,KACwB,GAA3BhM,KAAKmG,MAAMvB,MAAMhD,OAChB,kBAAC,EAAD,CACEgD,MAAO5E,KAAKmG,MAAMvB,MAClBwC,MAAOpH,KAAKmG,MAAMqE,cAElB,KACwB,GAA3BxK,KAAKmG,MAAMvB,MAAMhD,OAChB,yBAAK2H,UAAU,UACb,yBAAKA,UAAU,SACb,uBAAGI,MAAO,CAACsB,QAAQ,WAAnB,kBAEA,6BAEA,wBAAI1B,UAAU,aAAavJ,KAAKmG,MAAMyI,qBAExC,yBAAKrF,UAAU,eACX,2BAAOtG,MAAM,WAAWsG,UAAU,cAAlC,oBACA,2BAAOsB,SAAU7K,KAAKqN,mBAAoBzM,GAAG,SAASwB,KAAK,UAE9D,6BAAMpC,KAAKmG,MAAMiJ,WAElB,U,GA/LMlF,IAAMC,WCMJ+F,QACW,cAA7BzH,OAAO0H,SAASC,UAEe,UAA7B3H,OAAO0H,SAASC,UAEhB3H,OAAO0H,SAASC,SAASrC,MACvB,2DCZNsC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF5C,SAAS6C,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMpJ,c","file":"static/js/main.67616d99.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mo.1906809e.png\";","module.exports = __webpack_public_path__ + \"static/media/mi.e22ac40b.png\";","import randomHexColor from 'random-hex-color';\r\n\r\nclass Graph {\r\n  constructor(maxLevel = null, saveState, saved) {\r\n    this._maxLevel = maxLevel;\r\n    this._nodes = {};\r\n    this._adjList = {};\r\n    this._saveState = saveState;\r\n    this._saved = saved;\r\n  }\r\n\r\n  getSavedStatus() {\r\n    return this._saved;\r\n  }\r\n\r\n  setSavedState(save) {\r\n    this._saved = save;\r\n  }\r\n\r\n  getSaveState() {\r\n    return this._saveState;\r\n  }\r\n\r\n  getNode(key) {\r\n    return this._nodes[key];\r\n  }\r\n\r\n  getNodes() {\r\n    const nodes = [];\r\n    for (let key of Object.keys(this._nodes)) {\r\n      nodes.push({\r\n        id: this._nodes[key]._key.key,\r\n        label: this._nodes[key]._key.key,\r\n        title: this._nodes[key]._key.key,\r\n      });\r\n    }\r\n\r\n    return nodes;\r\n  }\r\n\r\n  getEdges() {\r\n    const edges = [];\r\n    const values_3_edges = [-0.3, 0, 0.3];\r\n    const values_4_edges = [-0.3, -0.1, 0.1, 0.3];\r\n    const values_5_edges = [-0.6, -0.4, -0.2, 0, 0.2];\r\n    const values_6_edges = [-0.6, -0.4, -0.2, 0, 0.2, 0.4];\r\n    const values_7_edges = [-0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6];\r\n    const values_8_edges = [-0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6, 0.8];\r\n    for (let key of Object.keys(this._adjList)) {\r\n      const color = randomHexColor();\r\n      let i = 0;\r\n      for (let edge of this._adjList[key]) {\r\n        let array_to_use;\r\n        switch (this._adjList[key].length) {\r\n          case 3:\r\n            array_to_use = values_3_edges;\r\n            break;\r\n          case 4:\r\n            array_to_use = values_4_edges;\r\n            break;\r\n          case 5:\r\n            array_to_use = values_5_edges;\r\n            break;\r\n          case 6:\r\n            array_to_use = values_6_edges;\r\n            break;\r\n          case 7:\r\n            array_to_use = values_7_edges;\r\n            break;\r\n          case 8:\r\n            array_to_use = values_8_edges;\r\n            break;\r\n          default:\r\n            array_to_use = values_3_edges;\r\n            break;\r\n        }\r\n\r\n        edges.push({\r\n          from: key,\r\n          color: {\r\n            color: color,\r\n            highlight: 'black',\r\n          },\r\n          to: edge._toNode._key.key,\r\n          label: `${edge._value}`,\r\n          title: `${edge._value}`,\r\n          id: `${key}.${edge._value}.${edge._toNode._key.key}`,\r\n          smooth: {\r\n            enabled: true,\r\n            type: \"curvedCCW\",\r\n            roundness: array_to_use[i],\r\n          },\r\n          width: 4,\r\n          shadow: { enabled: true },\r\n          selectionWidth: 4,\r\n          font: {\r\n            size: 20,\r\n            color: color,\r\n            strokeColor: 'black',\r\n            strokeWidth: 5,\r\n            bold:true\r\n          },\r\n        });\r\n        i++;\r\n      }\r\n    }\r\n\r\n    return edges;\r\n  }\r\n\r\n  addNodes(nodes) {\r\n    for (let node of nodes) {\r\n      this._nodes[node._key.key] = node;\r\n      this._adjList[node._key.key] = [];\r\n    }\r\n  }\r\n\r\n  addEdge(node1, node2, value) {\r\n    this._adjList[node1._key.key].push(new Edge(node2, value));\r\n    // this._adjList[node2._key.key].push(new Edge(node1, value));\r\n  }\r\n\r\n  canAdvanceAndReachRoot(path) {\r\n    const rootKey = new NodeKey(0, 0);\r\n\r\n    // Order the path.\r\n    path.sort((a, b) => a._level - b._level);\r\n\r\n    let result = [];\r\n    // Trying to advance in each position and check if the root node can be reached\r\n    for (let position of path) {\r\n      if (position._level === 0) {\r\n        continue;\r\n      }\r\n\r\n      // Trying to advance for the position\r\n      let positionResult = this.advance(rootKey, position, [], [], result);\r\n      if (!positionResult && !positionResult.length) {\r\n        // Can't advance anymore => return false\r\n        return [];\r\n      }\r\n    }\r\n\r\n    return result; // The path can be advanced.\r\n  }\r\n\r\n  advance(rootKey, currentKey, keyChain, edgesChain, result) {\r\n    // If the root node is reached then can be advanced => return true.\r\n    if (currentKey._level === rootKey._level) {\r\n      if (currentKey._id !== rootKey._id) {\r\n        return false;\r\n      }\r\n\r\n      result.push([keyChain, edgesChain]);\r\n\r\n      return true;\r\n    }\r\n\r\n    // Order the edges by value and process them one by one.\r\n    let edges = [];\r\n    for (let edge of this._adjList[currentKey.key]) {\r\n      if (edge._toNode._key._level === currentKey._level - 1) {\r\n        edges.push(edge);\r\n      }\r\n    }\r\n    edges.sort((a, b) => a._value - b._value);\r\n\r\n    for (let edge of edges) {\r\n      if (edge.processed) {\r\n        edge.unProcess();\r\n        continue;\r\n      }\r\n\r\n      let keyChainPath = [...keyChain, currentKey.key, edge._toNode._key.key];\r\n      let edgeChainPath = [\r\n        ...edgesChain,\r\n        `${currentKey.key}.${edge._value}.${edge._toNode._key.key}`,\r\n      ];\r\n      this.advance(\r\n        rootKey,\r\n        edge._toNode._key,\r\n        keyChainPath,\r\n        edgeChainPath,\r\n        result\r\n      );\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n\r\nclass Node {\r\n  constructor(level, id, lastLevel = false) {\r\n    this._key = new NodeKey(level, id);\r\n    this._lastLevel = lastLevel;\r\n  }\r\n}\r\n\r\nclass Edge {\r\n  constructor(node, value, processed = false) {\r\n    this._toNode = node;\r\n    this._value = value;\r\n    this._processed = processed;\r\n  }\r\n\r\n  process() {\r\n    this._processed = true;\r\n  }\r\n\r\n  unProcess() {\r\n    this._processed = false;\r\n  }\r\n\r\n  toString() {\r\n    return `${this._toNode.key} ${this._value}`;\r\n  }\r\n}\r\n\r\nclass NodeKey {\r\n  constructor(level, id) {\r\n    this._level = level;\r\n    this._id = id;\r\n  }\r\n\r\n  get key() {\r\n    return `${this._level}-${this._id}`;\r\n  }\r\n}\r\n\r\nclass GraphHelpers {\r\n  getPathFromRoot(graph, targeLevel, targetId) {\r\n    let level = 0;\r\n\r\n    var path = [];\r\n    let edge;\r\n\r\n    while (level <= targeLevel) {\r\n      for (let e of graph._adjList[`${level}-0`]) {\r\n        if (e._value === 0 && e._toNode._key._level === level - 1) {\r\n          edge = e;\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (edge != null) {\r\n        edge.process();\r\n      }\r\n\r\n      path.push(new NodeKey(level++, 0));\r\n    }\r\n\r\n    return path;\r\n  }\r\n}\r\n\r\nexport { Graph, Node, Edge, NodeKey, GraphHelpers };\r\n","import React from 'react';\nimport Graph from 'react-graph-vis';\nimport { GraphHelpers } from './Graph';\nimport './GraphVisualizer.css';\n\nclass GraphVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    const helpers = new GraphHelpers();\n    this.maxLevel = this.props.count;\n    this.graph = this.props.graph;\n    this.path = helpers.getPathFromRoot(this.graph, this.maxLevel, 0);\n    this.result = this.graph\n      .canAdvanceAndReachRoot(this.path)\n      .filter((array) => {\n        return array[0][0].includes(this.maxLevel.toString());\n      });\n\n    \n    this.position = 0;\n    let c_edges = this.graph.getEdges();\n    this.state = {\n      currentLevel: 1,\n      prevLevel: 0,\n      message: '',\n      graph: {\n        nodes: this.graph.getNodes(),\n        edges: c_edges,\n      },\n      options: {\n        layout: {\n          hierarchical: {\n            direction: 'DU',\n            sortMethod: 'directed',\n            nodeSpacing: 300, // 300 for the smaller graph\n          },\n        },\n        edges: {\n          arrows: { to: { enabled: false } },\n\n          chosen: {\n            label: function (values, id, selected, hovering) {\n              values.color = 'red';\n              values.strokeWidth = 3;\n              values.strokeColor = 'orange';\n            },\n          },\n        },\n        height: (window.innerHeight).toString(),\n        nodes: {\n          borderWidth: 4,\n          borderWidthSelected: 2,\n          brokenImage: undefined,\n          chosen: true,\n          color: {\n            border: '#2B7CE9',\n            background: '#fff',\n            highlight: {\n              border: 'red',\n              background: 'red',\n            },\n            hover: {\n              border: '#2B7CE9',\n              background: '#D2E5FF',\n            },\n          },\n          fixed: {\n            x: false,\n            y: false,\n          },\n        },\n      },\n    };\n\n    this.state.nodesMessage = 'You can start mapping!';\n    this.state.edgesMessage = '';\n    this.state.hideNodes = false;\n  }\n\n  handleClickForward = () => {\n    if (this.position == this.result.length - 1) {\n      return;\n    }\n\n    this.position++;\n\n    const selected = {\n      nodes: this.result[this.position][0],\n      edges: this.result[this.position][1],\n    };\n\n    this.network.selectEdges(selected.edges);\n\n    this.setState({\n      nodesMessage: selected.nodes.join('=>'),\n      edgesMessage: selected.edges.map((e) => e.split('.')[1]).join('=>'),\n    });\n  };\n\n  handleClickBackward = () => {\n    if (this.position === 0) return;\n    if (this.position >= this.result.length) {\n      return;\n    }\n\n    this.position--;\n\n    const selected = {\n      nodes: this.result[this.position][0],\n      edges: this.result[this.position][1],\n    };\n\n\n    this.network.selectEdges(selected.edges);\n\n\n    this.setState({\n      nodesMessage: selected.nodes.join('=>'),\n      edgesMessage: selected.edges.map((e) => e.split('.')[1]).join('=>'),\n    });\n  };\n\n  initZeroPath = () => {\n    const selected = {\n      nodes: this.result[0][0],\n      edges: this.result[0][1],\n    };\n\n    this.network.selectEdges(selected.edges);\n\n    this.setState({\n      nodesMessage: selected.nodes.join('=>'),\n      edgesMessage: selected.edges.map((e) => e.split('.')[1]).join('=>'),\n    });\n  };\n\n  onNodesOfCurrentLevelChange = (e) => {\n    this.setState({\n      currentLevel: e.target.value,\n    });\n  };\n\n  onNodesOfCurrentLevelClick = (e) => {\n    const prevLevel = this.state.prevLevel;\n    const currentLevel = this.state.currentLevel;\n\n    this.setState({\n      prevLevel: currentLevel,\n      currentLevel: 0,\n    });\n  };\n\n\n\n  saveGraph = (e) => {\n    if(this.graph.getSavedStatus()){\n      alert(\"This graph has already been saved\");\n      return;\n    }\n\n    this.graph.setSavedState(true);\n\n    let new_data;\n    if(!JSON.parse(localStorage.getItem('savedGraphs'))){\n      new_data = {};\n    }else{\n      new_data =  JSON.parse(localStorage.getItem('savedGraphs'));\n    }\n\n    const taken_date = new Date();\n    new_data[taken_date.toString()] = this.graph.getSaveState();\n    localStorage.setItem('savedGraphs', JSON.stringify(new_data));\n  }\n\n  render() {\n    return (\n      <>\n        <nav>\n          <h1 id=\"logo\">Vershik Map</h1>\n\n          \n        </nav>\n        <button onClick={this.saveGraph} id=\"save-button\" >\n            Save Diagram\n        </button>\n\n        <div\n          className=\"button-group\"\n        >\n          <label>Vershik map controls: </label>\n          <button className=\"action\" onClick={this.handleClickBackward}>\n            Previous\n          </button>\n          <button className=\"action\" onClick={this.handleClickForward}>\n            Next\n          </button>\n        </div>\n\n        <textarea\n          readOnly={true}\n          label=\"Process:\"\n          rows={8}\n          cols={8}\n          style={{\n            position: 'absolute',\n            left: '2%',\n            bottom: '10%',\n            zIndex: 2,\n            width: '600px',\n            backgroundColor: \"rgba(0, 0, 0, 0)\",\n            color:\"white\",\n            fontSize: \"1.2em\",\n          }}\n          value={'Logs: ' + '\\n' + this.state.nodesMessage + '\\n' + this.state.edgesMessage}\n        />\n\n        <Graph\n          graph={this.state.graph}\n          options={this.state.options}\n          getNetwork={(network) => {\n            this.network = network;\n            this.initZeroPath();\n          }}\n        />\n      </>\n    );\n  }\n}\n\nexport default GraphVisualizer;\n","import React from \"react\";\nimport _ from \"lodash\";\nimport mo from \"./mo.png\";\nimport mi from \"./mi.png\";\nimport \"./MatrixInput.css\";\n\nimport Collapsible from \"react-collapsible\";\n\nclass MatrixInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dims: { x: 0, y: 0 },\n      reload: [],\n      levelsCount: 0,\n      pushed: false,\n      levels: [],\n      edgeValues: [],\n      finalButtonDisabled: true,\n      submitButtonDisabled: false,\n    };\n  }\n\n  setItem(levelCount, x, y, value) {\n    const clone = this.state.reload;\n    clone[levelCount][x][y] = value;\n\n    this.setState({ reload: clone });\n  }\n\n  levelsOnChange = (e) => {\n    let levels = e.currentTarget.value - 1;\n    this.setState({ levelsCount: levels });\n  };\n\n  async createArray(x, y, levelCount) {\n    return new Promise((resolve) => {\n      let arr1 = [];\n      for (let i = 0; i < x; i++) {\n        arr1.push([]);\n        for (let j = 0; j < y; j++) {\n          arr1[i].push(null);\n        }\n      }\n\n      let newLevels = {};\n      if (this.state.reload[0] === undefined) {\n        newLevels[levelCount] = arr1;\n      } else {\n        newLevels = _.cloneDeep(this.state.reload);\n        newLevels[levelCount] = arr1;\n      }\n\n      resolve(newLevels);\n    });\n  }\n\n  async setEdgesString(levelCount, i, edgeString) {\n    const clone = this.state.edgeValues;\n\n    clone[levelCount][i] = edgeString;\n    await this.setState({ edgeValues: clone });\n  }\n\n  async changeReloadState(x, y, levelCount) {\n    await this.setState({ reload: await this.createArray(x, y, levelCount) });\n    let newEdgeArrays = [];\n    let LevelrsArray = [];\n    for (let i = 0; i < this.state.levelsCount; i++) {\n      LevelrsArray.push(this.Level(i));\n\n      newEdgeArrays.push([]);\n    }\n\n    this.setState({ levels: LevelrsArray, edgeValues: newEdgeArrays });\n  }\n\n  Level = (levelCount) => {\n    let x;\n    let y;\n\n    return (\n      <div key={levelCount} className=\"input-level\">\n        <p className=\"level\">{`Level ${\n          levelCount + 1\n        }-${levelCount} incidence matrix: `}</p>\n        <div>\n          <label>\n            X:\n            <input\n              type=\"number\"\n              name=\"x\"\n              placeholder={`Vertices in level ${levelCount + 1}`}\n              onChange={(e) => {\n                const { name, value } = e.currentTarget;\n                x = value;\n              }}\n            />\n          </label>\n          <label>\n            Y:\n            <input\n              type=\"number\"\n              name=\"y\"\n              placeholder={`Vertices in level ${levelCount}`}\n              onChange={(e) => {\n                const { name, value } = e.currentTarget;\n                y = value;\n              }}\n            />\n          </label>\n          <button\n            style={{ color: \"black\" }}\n            onClick={() => {\n              this.changeReloadState(x, y, levelCount);\n            }}\n          >\n            Set\n          </button>\n        </div>\n        <div>\n          {this.state.reload[parseInt(levelCount)].map((rows, i) => (\n            <div key={`${rows}, ${i}`}\n              style={{\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"center\",\n              }}\n            >\n              {rows.map((col, j) => (\n                <div key={`${col}, ${j}`}>\n                  <input\n                    placeholder={`${i},${j}`}\n                    type=\"text\"\n                    onChange={(e) =>\n                      this.setItem(\n                        levelCount,\n                        i,\n                        j,\n                        parseInt(e.currentTarget.value)\n                      )\n                    }\n                  />\n                </div>\n              ))}\n            </div>\n          ))}\n        </div>\n        <div>\n          <p style={{ margin: \"2px\" }}>\n            Edge Values Separted by a comma(the fields will show up after you\n            set the dimensions):{\" \"}\n          </p>\n          {this.state.reload[parseInt(levelCount)].map((rows, i) => (\n            <div key={`${rows}, ${i}`}>\n              {\" \"}\n              <div\n                style={{\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  justifyContent: \"center\",\n                }}\n              >\n                <input\n                  placeholder={`Vertex ${i}, Level ${levelCount + 1}`}\n                  type=\"text\"\n                  onChange={(e) =>\n                    this.setEdgesString(levelCount, i, e.currentTarget.value)\n                  }\n                />\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  };\n\n  createLevels = () => {\n    this.setState({ finalButtonDisabled: false });\n    this.setState({ submitButtonDisabled: true });\n    if (!this.state.pushed) {\n      let temp = [];\n      for (let i = 0; i < this.state.levelsCount; i++) {\n        temp.push([]);\n      }\n\n      this.setState({ reload: temp }, () => {\n        let LevelrsArray = [];\n        for (let i = 0; i < this.state.levelsCount; i++) {\n          LevelrsArray.push(this.Level(i));\n        }\n        this.setState({ levels: LevelrsArray });\n      });\n      this.state.pushed = true;\n    }\n  };\n\n  passToParent = () => {\n    const pass = this.props.setMatrixFromInput;\n    pass(this.state.reload, this.state.levelsCount, this.state.edgeValues, false);\n  };\n\n  render() {\n    return (\n      <div>\n        <Collapsible trigger=\"----  Click on me for Instructions!  ----\">\n          <hr></hr>\n          <br />\n          <div className=\"instructions\">\n            <label>The root level has one vertex for now &#128528;</label>\n            <div className=\"ins-list\">\n              <ol>\n                <li>\n                  Set how many levels you want, start numbering from 1 and\n                  include the root with it. ( if we have the root and another\n                  level, we set the levels to 2. etc... )\n                </li>\n                <li>\n                  After that set the dimensions of the incidence matrix for each\n                  level before filling any of the actual matrices. (Note: click\n                  set before you move on to the next level)\n                </li>\n                <li>\n                  Start filling the incidence matrix and the edge value fields\n                </li>\n                <li>\n                  You can fill the edge value fields by providing a\n                  comma-seperated string, the program will input it from left to\n                  right for each vertex.\n                </li>\n                <li>\n                  Click the submit-graph button after you finish filling\n                  everything\n                </li>\n              </ol>\n            </div>\n            <h5 style={{ display: \"inline\", margin: \"20px\" }}> Input: </h5>\n            <img style={{ width: \"400px\", verticalAlign: \"middle\" }} src={mi} />\n            <h5 style={{ display: \"inline\", margin: \"20px\" }}> Output: </h5>\n            <img style={{ width: \"200px\", verticalAlign: \"middle\" }} src={mo} />\n            <p>\n              If you have any problems with the input-fields, refresh the site!\n            </p>\n            <p>\n              If the graph doesn't showup after you hit submit to graph, then\n              you probably have an error in the matrices.\n            </p>\n\n            <p>\n              Email{\" \"}\n              <a\n                style={{ color: \"white\" }}\n                href=\"mailto: bshaheen@hamilton.edu\"\n              >\n                me\n              </a>{\" \"}\n              if you encounter any bugs!\n            </p>\n          </div>\n        </Collapsible>\n\n        <br />\n        <br />\n        <br />\n\n        <div className=\"levels\">\n          <label>\n            Levels:\n            <input\n              type=\"number\"\n              name=\"x\"\n              onChange={this.levelsOnChange}\n            ></input>\n            <button\n              onClick={this.createLevels}\n              disabled={this.state.submitButtonDisabled}\n              style={{ margin: \"5px\" }}\n            >\n              Submit\n            </button>\n          </label>\n          {this.state.levels ? this.state.levels : <text>No Levels Yet</text>}\n          <hr />\n          <button\n            onClick={this.passToParent}\n            disabled={this.state.finalButtonDisabled}\n            style={{ margin: \"5px\" }}\n          >\n            Submit To graph\n          </button>\n        </div>\n\n        \n      </div>\n    );\n  }\n}\n\nexport default MatrixInput;\n","import React from \"react\";\nimport \"./App.css\";\nimport GraphVisualizer from \"./GraphVisualizer\";\nimport MatrixInput from \"./MatrixInput\";\nimport { Graph, Node } from \"./Graph\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      graph: [],\n      levelsCount: 0,\n      savedGraphs: [],\n      savedGraphElements: [],\n      download: [],\n    };\n  }\n\n  componentDidMount() {\n    this.setState(\n      {\n        savedGraphs: JSON.parse(localStorage.getItem(\"savedGraphs\")),\n      },\n      this.setSavedGraphsList\n    );\n  }\n\n  getSavedGraphsList = () => {\n    if (window.File && window.FileReader && window.FileList && window.Blob) {\n      var file = document.querySelector(\"input[type=file]\").files[0];\n      var reader = new FileReader();\n\n      var textFile = /text.*/;\n\n      if (file.type.match(textFile)) {\n        reader.onload = (event) => {\n          const new_saved_graphs = {...this.state.savedGraphs, ...JSON.parse(event.target.result)};\n          localStorage.setItem(\n            \"savedGraphs\",\n            JSON.stringify(new_saved_graphs)\n          );\n          this.setState(\n            {\n              savedGraphs: new_saved_graphs,\n            },\n            this.setSavedGraphsList\n          );\n        };\n      } else {\n        alert(\"It's not a text file!\");\n      }\n      reader.readAsText(file);\n    } else {\n      alert(\"Your browser is too old to support HTML5 File API!\");\n    }\n  };\n\n  setSavedGraphsList = () => {\n    let elements = [];\n    for (const graph in this.state.savedGraphs) {\n      // g._nodes = this.state.savedGraphs[graph]._nodes;\n      // g._adjList = this.state.savedGraphs[graph]._adjList;\n      // g._maxLevel = this.state.savedGraphs[graph]._maxLevel;\n      const element = (\n        <li key={graph}>\n          <a\n            onClick={() => {\n              const c_graph = this.state.savedGraphs[graph];\n              this.setMatrixFromInput(\n                c_graph.new_m,\n                c_graph.count,\n                c_graph.edgeValues,\n                true\n              );\n            }}\n          >\n            {graph}\n          </a>\n          <button\n            style={{ marginLeft: \"20px\" }}\n            onClick={() => {\n              let nonEditedSavedGraphs = this.state.savedGraphs;\n              delete nonEditedSavedGraphs[graph];\n              localStorage.setItem(\n                \"savedGraphs\",\n                JSON.stringify(nonEditedSavedGraphs)\n              );\n              this.setState(\n                {\n                  savedGraphs: nonEditedSavedGraphs,\n                },\n                this.setSavedGraphsList\n              );\n            }}\n          >\n            Delete\n          </button>\n        </li>\n      );\n\n      elements.push(element);\n    }\n\n    this.setState({ savedGraphElements: elements }, this.downloadGraphs);\n  };\n\n  downloadGraphs = async () => {\n    const myData = JSON.stringify(this.state.savedGraphs);\n\n    const fileName = \"diagrams\";\n    const blob = new Blob([myData], { type: \"application/json\" });\n    const href = await URL.createObjectURL(blob);\n    const link = [\n      <a key={\"download\"} download={fileName + \".txt\"} href={href}>\n        Download Graphs\n      </a>,\n    ];\n    this.setState({ download: link });\n  };\n\n  setMatrixFromInput = async (m, count, edgeValues, saved) => {\n    let save_state;\n    if (!saved) {\n      const new_m = JSON.parse(JSON.stringify(m));\n      save_state = { new_m, count, edgeValues };\n    } else {\n      save_state = null;\n    }\n\n    m.unshift([[]]);\n    const graph = new Graph(count, save_state, saved);\n    let index = 0;\n    for (let matrix of m) {\n      const nodesCountInLevel = matrix.length;\n      for (let nodeCount = 0; nodeCount < nodesCountInLevel; ++nodeCount) {\n        let node = new Node(index, nodeCount, count === index);\n        graph.addNodes([node]);\n      }\n\n      if (index === 0) {\n        ++index;\n\n        continue;\n      }\n\n      for (let i = 0; i < matrix.length; i++) {\n        let value = 0;\n        let edgeArr = edgeValues[index - 1][i].split(\",\");\n\n        for (let j = 0; j < matrix[i].length; j++) {\n          for (let mn = 0; mn < matrix[i][j]; mn++) {\n            const new_val = parseInt(edgeArr[value]);\n            graph.addEdge(\n              graph.getNode(`${index}-${i}`),\n              graph.getNode(`${index - 1}-${j}`),\n              new_val ? new_val : 0\n            );\n            value++;\n          }\n        }\n      }\n      ++index;\n    }\n\n    this.setState({ levelsCount: count, graph: graph });\n  };\n\n  render() {\n    return (\n      <div>\n        {this.state.graph.length == 0 ? (\n          <MatrixInput\n            matrix={this.state.array}\n            setMatrixFromInput={this.setMatrixFromInput}\n          />\n        ) : null}\n        {this.state.graph.length != 0 ? (\n          <GraphVisualizer\n            graph={this.state.graph}\n            count={this.state.levelsCount}\n          ></GraphVisualizer>\n        ) : null}\n        {this.state.graph.length == 0 ? (\n          <div className=\"levels\">\n            <div className=\"saves\">\n              <p style={{display:\"inline\"}} >Saved diagrams</p>\n\n              <hr></hr>\n\n              <ul className=\"save-list\">{this.state.savedGraphElements}</ul>\n            </div>\n            <div className=\"button-wrap\">\n                <label value=\"upload-d\" className=\"new-button\">Upload Diagrams:</label>\n                <input onChange={this.getSavedGraphsList} id=\"upload\" type=\"file\"></input>\n              </div>\n            {<div>{this.state.download}</div>}\n          </div>\n        ) : null}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}