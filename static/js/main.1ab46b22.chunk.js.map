{"version":3,"sources":["mo.png","mi.png","Graph.js","GraphVisualizer.js","MatrixInput.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Graph","maxLevel","this","_maxLevel","_nodes","_adjList","key","nodes","Object","keys","push","id","_key","label","title","edges","values_3_edges","values_4_edges","values_5_edges","edge","array_to_use","length","from","to","_toNode","_value","smooth","enabled","type","roundness","parseInt","width","shadow","selectionWidth","font","size","node","node1","node2","value","Edge","path","rootKey","NodeKey","sort","a","b","_level","result","position","positionResult","advance","currentKey","keyChain","edgesChain","_id","processed","unProcess","keyChainPath","edgeChainPath","Node","level","lastLevel","_lastLevel","_processed","GraphHelpers","graph","targeLevel","targetId","e","process","GraphVisualizer","props","handleClickForward","selected","network","selectEdges","setState","nodesMessage","join","edgesMessage","map","split","handleClickBackward","initZeroPath","onNodesOfCurrentLevelChange","currentLevel","target","onNodesOfCurrentLevelClick","state","prevLevel","helpers","count","getPathFromRoot","canAdvanceAndReachRoot","filter","array","includes","toString","c_edges","getEdges","message","getNodes","options","layout","hierarchical","direction","sortMethod","nodeSpacing","arrows","color","highlight","chosen","values","hovering","strokeWidth","strokeColor","height","window","innerHeight","borderWidth","borderWidthSelected","brokenImage","undefined","border","background","hover","fixed","x","y","hideNodes","ButtonGroup","className","aria-label","Button","onClick","createNewDiagram","TextField","multiline","rowsMax","style","left","bottom","zIndex","getNetwork","React","Component","MatrixInput","levelsOnChange","levels","currentTarget","levelsCount","Level","levelCount","name","margin","onChange","changeReloadState","reload","rows","i","display","col","j","setItem","setEdgesString","createLevels","finalButtonDisabled","submitButtonDisabled","pushed","temp","LevelrsArray","passToParent","pass","setMatrixFromInput","edgeValues","dims","clone","Promise","resolve","arr1","newLevels","_","cloneDeep","edgeString","createArray","newEdgeArrays","trigger","verticalAlign","src","mi","mo","href","disabled","App","m","unshift","console","log","index","matrix","nodesCountInLevel","nodeCount","addNodes","edgeArr","mn","new_val","addEdge","getNode","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.1ab46b22.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mo.1906809e.png\";","module.exports = __webpack_public_path__ + \"static/media/mi.e22ac40b.png\";","class Graph {\r\n  constructor(maxLevel = null) {\r\n    this._maxLevel = maxLevel;\r\n    this._nodes = {};\r\n    this._adjList = {};\r\n  }\r\n\r\n  getNode(key) {\r\n    return this._nodes[key];\r\n  }\r\n\r\n  getNodes() {\r\n    const nodes = [];\r\n    for (let key of Object.keys(this._nodes)) {\r\n      nodes.push({\r\n        id: this._nodes[key]._key.key,\r\n        label: this._nodes[key]._key.key,\r\n        title: this._nodes[key]._key.key,\r\n      });\r\n    }\r\n\r\n    return nodes;\r\n  }\r\n\r\n  getEdges() {\r\n    const edges = [];\r\n    const values_3_edges = [-0.3, 0, 0.3];\r\n    const values_4_edges = [-0.3, -0.1, 0.1, 0.3];\r\n    const values_5_edges = [-0.6, -0.4, -0.2, 0, 0.2];\r\n    for (let key of Object.keys(this._adjList)) {\r\n      for (let edge of this._adjList[key]) {\r\n        let array_to_use;\r\n        if (this._adjList[key].length === 3) array_to_use = values_3_edges;\r\n        else if (this._adjList[key].length === 4) array_to_use = values_4_edges;\r\n        else if (this._adjList[key].length === 5) array_to_use = values_5_edges;\r\n        else array_to_use = values_3_edges;\r\n        edges.push({\r\n          from: key,\r\n          to: edge._toNode._key.key,\r\n          label: `${edge._value}`,\r\n          title: `${edge._value}`,\r\n          id: `${key}.${edge._value}.${edge._toNode._key.key}`,\r\n          smooth: {\r\n            enabled: true,\r\n            type: 'curvedCCW',\r\n            roundness: array_to_use[parseInt(edge._value)],\r\n          },\r\n          width: 4,\r\n          shadow: { enabled: true },\r\n          selectionWidth: 2,\r\n          font: {\r\n            size: 20,\r\n          },\r\n        });\r\n      }\r\n    }\r\n\r\n    return edges;\r\n  }\r\n\r\n  addNodes(nodes) {\r\n    for (let node of nodes) {\r\n      this._nodes[node._key.key] = node;\r\n      this._adjList[node._key.key] = [];\r\n    }\r\n  }\r\n\r\n  addEdge(node1, node2, value) {\r\n    this._adjList[node1._key.key].push(new Edge(node2, value));\r\n    // this._adjList[node2._key.key].push(new Edge(node1, value));\r\n  }\r\n\r\n  canAdvanceAndReachRoot(path) {\r\n    const rootKey = new NodeKey(0, 0);\r\n\r\n    // Order the path.\r\n    path.sort((a, b) => a._level - b._level);\r\n\r\n    let result = [];\r\n    // Trying to advance in each position and check if the root node can be reached\r\n    for (let position of path) {\r\n      if (position._level === 0) {\r\n        continue;\r\n      }\r\n\r\n      // Trying to advance for the position\r\n      let positionResult = this.advance(rootKey, position, [], [], result);\r\n      if (!positionResult && !positionResult.length) {\r\n        // Can't advance anymore => return false\r\n        return [];\r\n      }\r\n    }\r\n\r\n    return result; // The path can be advanced.\r\n  }\r\n\r\n  advance(rootKey, currentKey, keyChain, edgesChain, result) {\r\n    // If the root node is reached then can be advanced => return true.\r\n    if (currentKey._level === rootKey._level) {\r\n      if (currentKey._id !== rootKey._id) {\r\n        return false;\r\n      }\r\n\r\n      result.push([keyChain, edgesChain]);\r\n\r\n      return true;\r\n    }\r\n\r\n    // Order the edges by value and process them one by one.\r\n    let edges = [];\r\n    for (let edge of this._adjList[currentKey.key]) {\r\n      if (edge._toNode._key._level === currentKey._level - 1) {\r\n        edges.push(edge);\r\n      }\r\n    }\r\n    edges.sort((a, b) => a._value - b._value);\r\n\r\n    for (let edge of edges) {\r\n      if (edge.processed) {\r\n        edge.unProcess();\r\n        continue;\r\n      }\r\n\r\n      let keyChainPath = [...keyChain, currentKey.key, edge._toNode._key.key];\r\n      let edgeChainPath = [\r\n        ...edgesChain,\r\n        `${currentKey.key}.${edge._value}.${edge._toNode._key.key}`,\r\n      ];\r\n      this.advance(\r\n        rootKey,\r\n        edge._toNode._key,\r\n        keyChainPath,\r\n        edgeChainPath,\r\n        result\r\n      );\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n\r\nclass Node {\r\n  constructor(level, id, lastLevel = false) {\r\n    this._key = new NodeKey(level, id);\r\n    this._lastLevel = lastLevel;\r\n  }\r\n}\r\n\r\nclass Edge {\r\n  constructor(node, value, processed = false) {\r\n    this._toNode = node;\r\n    this._value = value;\r\n    this._processed = processed;\r\n  }\r\n\r\n  process() {\r\n    this._processed = true;\r\n  }\r\n\r\n  unProcess() {\r\n    this._processed = false;\r\n  }\r\n\r\n  toString() {\r\n    return `${this._toNode.key} ${this._value}`;\r\n  }\r\n}\r\n\r\nclass NodeKey {\r\n  constructor(level, id) {\r\n    this._level = level;\r\n    this._id = id;\r\n  }\r\n\r\n  get key() {\r\n    return `${this._level}-${this._id}`;\r\n  }\r\n}\r\n\r\nclass GraphHelpers {\r\n  getPathFromRoot(graph, targeLevel, targetId) {\r\n    let level = 0;\r\n\r\n    var path = [];\r\n    let edge;\r\n\r\n    while (level <= targeLevel) {\r\n      for (let e of graph._adjList[`${level}-0`]) {\r\n        if (e._value === 0 && e._toNode._key._level === level - 1) {\r\n          edge = e;\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (edge != null) {\r\n        edge.process();\r\n      }\r\n\r\n      path.push(new NodeKey(level++, 0));\r\n    }\r\n\r\n    return path;\r\n  }\r\n}\r\n\r\nexport { Graph, Node, Edge, NodeKey, GraphHelpers };\r\n","import React from 'react';\nimport Graph from 'react-graph-vis';\nimport { GraphHelpers } from './Graph';\nimport './GraphVisualizer.css';\nimport { Button, ButtonGroup, TextField } from '@material-ui/core';\n\nclass GraphVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    const helpers = new GraphHelpers();\n    this.maxLevel = this.props.count;\n    this.graph = this.props.graph;\n    this.path = helpers.getPathFromRoot(this.graph, this.maxLevel, 0);\n    this.result = this.graph\n      .canAdvanceAndReachRoot(this.path)\n      .filter((array) => {\n        return array[0][0].includes(this.maxLevel.toString());\n      });\n\n    \n    this.position = 0;\n    let c_edges = this.graph.getEdges();\n\n    this.state = {\n      currentLevel: 1,\n      prevLevel: 0,\n      message: '',\n      graph: {\n        nodes: this.graph.getNodes(),\n        edges: c_edges,\n      },\n      options: {\n        layout: {\n          hierarchical: {\n            direction: 'DU',\n            sortMethod: 'directed',\n            nodeSpacing: 300, // 300 for the smaller graph\n          },\n        },\n        edges: {\n          arrows: { to: { enabled: false } },\n          color: {\n            color: '#D2E5FF',\n            highlight: 'blue',\n          },\n          chosen: {\n            label: function (values, id, selected, hovering) {\n              values.color = 'red';\n              values.strokeWidth = 3;\n              values.strokeColor = 'orange';\n            },\n          },\n        },\n        height: window.innerHeight,\n        nodes: {\n          borderWidth: 4,\n          borderWidthSelected: 2,\n          brokenImage: undefined,\n          chosen: true,\n          color: {\n            border: '#2B7CE9',\n            background: '#fff',\n            highlight: {\n              border: 'red',\n              background: 'red',\n            },\n            hover: {\n              border: '#2B7CE9',\n              background: '#D2E5FF',\n            },\n          },\n          fixed: {\n            x: false,\n            y: false,\n          },\n        },\n      },\n    };\n\n    this.state.nodesMessage = 'You can start mapping!';\n    this.state.edgesMessage = '';\n    this.state.hideNodes = false;\n  }\n\n  handleClickForward = () => {\n    if (this.position == this.result.length - 1) {\n      return;\n    }\n\n    this.position++;\n\n    const selected = {\n      nodes: this.result[this.position][0],\n      edges: this.result[this.position][1],\n    };\n\n    this.network.selectEdges(selected.edges);\n\n    this.setState({\n      nodesMessage: selected.nodes.join('=>'),\n      edgesMessage: selected.edges.map((e) => e.split('.')[1]).join('=>'),\n    });\n  };\n\n  handleClickBackward = () => {\n    if (this.position === 0) return;\n\n    if (this.position >= this.result.length) {\n      return;\n    }\n\n    this.position--;\n\n    const selected = {\n      nodes: this.result[this.position][0],\n      edges: this.result[this.position][1],\n    };\n\n\n    this.network.selectEdges(selected.edges);\n\n\n    this.setState({\n      nodesMessage: selected.nodes.join('=>'),\n      edgesMessage: selected.edges.map((e) => e.split('.')[1]).join('=>'),\n    });\n  };\n\n  initZeroPath = () => {\n    const selected = {\n      nodes: this.result[0][0],\n      edges: this.result[0][1],\n    };\n\n    this.network.selectEdges(selected.edges);\n\n    this.setState({\n      nodesMessage: selected.nodes.join('=>'),\n      edgesMessage: selected.edges.map((e) => e.split('.')[1]).join('=>'),\n    });\n  };\n\n  onNodesOfCurrentLevelChange = (e) => {\n    this.setState({\n      currentLevel: e.target.value,\n    });\n  };\n\n  onNodesOfCurrentLevelClick = (e) => {\n    const prevLevel = this.state.prevLevel;\n    const currentLevel = this.state.currentLevel;\n\n    this.setState({\n      prevLevel: currentLevel,\n      currentLevel: 0,\n    });\n  };\n\n  render() {\n    return (\n      <>\n        <nav>\n          <h1 id=\"logo\">Vershik Map</h1>\n        </nav>\n        <ButtonGroup\n          className=\"button-group\"\n          color=\"primary\"\n          aria-label=\"outlined primary button group\"\n        >\n          <Button className=\"action\" onClick={this.createNewDiagram}>\n            New Diagram (WIP)\n          </Button>\n          <Button className=\"action\" onClick={this.handleClickBackward}>\n            Previous\n          </Button>\n          <Button className=\"action\" onClick={this.handleClickForward}>\n            Next\n          </Button>\n        </ButtonGroup>\n\n        <TextField\n          label=\"Process:\"\n          multiline\n          rowsMax={6}\n          style={{\n            position: 'absolute',\n            left: '2%',\n            bottom: '18%',\n            zIndex: 2,\n            width: '600px',\n          }}\n          value={this.state.nodesMessage + '\\n' + this.state.edgesMessage}\n        />\n\n        <Graph\n          graph={this.state.graph}\n          options={this.state.options}\n          getNetwork={(network) => {\n            this.network = network;\n            this.initZeroPath();\n          }}\n        />\n      </>\n    );\n  }\n}\n\nexport default GraphVisualizer;\n","import React from \"react\";\nimport _ from \"lodash\";\nimport mo from \"./mo.png\";\nimport mi from \"./mi.png\";\nimport \"./MatrixInput.css\";\n\nimport Collapsible from \"react-collapsible\";\n\nclass MatrixInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dims: { x: 0, y: 0 },\n      reload: [],\n      levelsCount: 0,\n      pushed: false,\n      levels: [],\n      edgeValues: [],\n      finalButtonDisabled: true,\n      submitButtonDisabled: false,\n    };\n  }\n\n  setItem(levelCount, x, y, value) {\n    const clone = this.state.reload;\n    clone[levelCount][x][y] = value;\n\n    this.setState({ reload: clone });\n  }\n\n  levelsOnChange = (e) => {\n    let levels = e.currentTarget.value - 1;\n    this.setState({ levelsCount: levels });\n  };\n\n  async createArray(x, y, levelCount) {\n    return new Promise((resolve) => {\n      let arr1 = [];\n      for (let i = 0; i < x; i++) {\n        arr1.push([]);\n        for (let j = 0; j < y; j++) {\n          arr1[i].push(null);\n        }\n      }\n\n      let newLevels = {};\n      if (this.state.reload[0] === undefined) {\n        newLevels[levelCount] = arr1;\n      } else {\n        newLevels = _.cloneDeep(this.state.reload);\n        newLevels[levelCount] = arr1;\n      }\n\n      resolve(newLevels);\n    });\n  }\n\n  async setEdgesString(levelCount, i, edgeString) {\n    const clone = this.state.edgeValues;\n\n    clone[levelCount][i] = edgeString;\n    await this.setState({ edgeValues: clone });\n  }\n\n  async changeReloadState(x, y, levelCount) {\n    await this.setState({ reload: await this.createArray(x, y, levelCount) });\n    let newEdgeArrays = [];\n    let LevelrsArray = [];\n    for (let i = 0; i < this.state.levelsCount; i++) {\n      LevelrsArray.push(this.Level(i));\n\n      newEdgeArrays.push([]);\n    }\n\n    this.setState({ levels: LevelrsArray, edgeValues: newEdgeArrays });\n  }\n\n  Level = (levelCount) => {\n    let x;\n    let y;\n\n    return (\n      <div>\n        <div>\n          <label>\n            X:\n            <input\n              type=\"number\"\n              name=\"x\"\n              style={{ margin: \"2px\" }}\n              onChange={(e) => {\n                const { name, value } = e.currentTarget;\n                x = value;\n              }}\n            />\n          </label>\n          <label>\n            Y:\n            <input\n              type=\"number\"\n              name=\"y\"\n              style={{ margin: \"2px\" }}\n              onChange={(e) => {\n                const { name, value } = e.currentTarget;\n                y = value;\n              }}\n            />\n          </label>\n          <button\n            onClick={() => {\n              this.changeReloadState(x, y, levelCount);\n            }}\n          >\n            Set\n          </button>\n        </div>\n        <div>\n          {this.state.reload[parseInt(levelCount)].map((rows, i) => (\n            <div style={{ display: \"flex\" }}>\n              {rows.map((col, j) => (\n                <div>\n                  <input\n                    type=\"text\"\n                    value={col}\n                    style={{ margin: \"2px\" }}\n                    onChange={(e) =>\n                      this.setItem(\n                        levelCount,\n                        i,\n                        j,\n                        parseInt(e.currentTarget.value)\n                      )\n                    }\n                  />\n                </div>\n              ))}\n            </div>\n          ))}\n        </div>\n        <div>\n          <p style={{ margin: \"2px\" }}>\n            Edges Values Separted by a comma(the fields will show up after you\n            set the dimensions):{\" \"}\n          </p>\n          {this.state.reload[parseInt(levelCount)].map((rows, i) => (\n            <div>\n              {\" \"}\n              <div style={{ display: \"flex\" }}>\n                <input\n                  style={{ margin: \"2px\" }}\n                  type=\"text\"\n                  onChange={(e) =>\n                    this.setEdgesString(levelCount, i, e.currentTarget.value)\n                  }\n                />\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  };\n\n  createLevels = () => {\n    this.setState({ finalButtonDisabled: false });\n    this.setState({ submitButtonDisabled: true });\n    if (!this.state.pushed) {\n      let temp = [];\n      for (let i = 0; i < this.state.levelsCount; i++) {\n        temp.push([]);\n      }\n\n      this.setState({ reload: temp }, () => {\n        let LevelrsArray = [];\n        for (let i = 0; i < this.state.levelsCount; i++) {\n          LevelrsArray.push(this.Level(i));\n        }\n        this.setState({ levels: LevelrsArray });\n      });\n      this.state.pushed = true;\n    }\n  };\n\n  passToParent = () => {\n    const pass = this.props.setMatrixFromInput;\n    pass(this.state.reload, this.state.levelsCount, this.state.edgeValues);\n  };\n\n  render() {\n    return (\n      <div>\n        <Collapsible trigger=\"----Click on me for Instructions!----\">\n          <hr></hr>\n          <br />\n          <div className=\"instructions\">\n            <label>The root level has one node for now &#128528;</label>\n            <div className=\"ins-list\">\n              <ol>\n                <li>\n                  Set how many levels you want, start numbering from 1 and\n                  include the root with it. ( if we have the root and another\n                  level, we set the levels to 2. etc... )\n                </li>\n                <li>\n                  After that set the dimensions of the incidence matrix for each\n                  level before filling any of them\n                </li>\n                <li>\n                  Start filling the incidence matrix and the edge value fields\n                </li>\n                <li>\n                  You can fill the edge value fields by providing a\n                  comma-seperated string, the program will input it from left to\n                  right.\n                </li>\n                <li>\n                  Click the submit-graph button after you finish filling\n                  everything\n                </li>\n              </ol>\n            </div>\n            <h5 style={{ display: \"inline\", margin: \"20px\" }}> Input: </h5>\n            <img style={{ width: \"400px\", verticalAlign: \"middle\" }} src={mi} />\n            <h5 style={{ display: \"inline\", margin: \"20px\" }}> Output: </h5>\n            <img style={{ width: \"200px\", verticalAlign: \"middle\" }} src={mo} />\n            <p>If you have any problems with the input, refresh the site</p>\n            <p>\n              Email{\" \"}\n              <a\n                style={{ color: \"white\" }}\n                href=\"mailto: bshaheen@hamilton.edu\"\n              >\n                me\n              </a>{\" \"}\n              if you encounter any bugs!\n            </p>\n          </div>\n        </Collapsible>\n\n        <br />\n        <br />\n        <br />\n\n        <div className=\"levels\">\n          <label>\n            Levels:\n            <input\n              style={{ margin: \"2px\" }}\n              type=\"number\"\n              name=\"x\"\n              onChange={this.levelsOnChange}\n            ></input>\n            <button\n              onClick={this.createLevels}\n              disabled={this.state.submitButtonDisabled}\n            >\n              Submit\n            </button>\n          </label>\n          {this.state.levels ? this.state.levels : <text>No Levels Yet</text>}\n          <button\n            onClick={this.passToParent}\n            disabled={this.state.finalButtonDisabled}\n          >\n            Submit To Graph\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MatrixInput;\n","import React from \"react\";\nimport \"./App.css\";\nimport GraphVisualizer from \"./GraphVisualizer\";\nimport MatrixInput from \"./MatrixInput\";\nimport { Graph, Node, NodeKey } from \"./Graph\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { graph: [], levelsCount: 0 };\n  }\n\n  setMatrixFromInput = async (m, count, edgeValues) => {\n    m.unshift([[]]);\n    console.log(edgeValues)\n    const graph = new Graph(count);\n    let index = 0;\n    for (let matrix of m) {\n      const nodesCountInLevel = matrix.length;\n      for (let nodeCount = 0; nodeCount < nodesCountInLevel; ++nodeCount) {\n        let node = new Node(index, nodeCount, count === index);\n        graph.addNodes([node]);\n      }\n\n\n      if (index === 0) {\n        ++index;\n\n        continue;\n      }\n\n      for (let i = 0; i < matrix.length; i++) {\n        let value = 0;\n        let edgeArr = edgeValues[index-1][i].split(',');\n\n        for (let j = 0; j < matrix[i].length; j++) {\n\n          for (let mn = 0; mn < matrix[i][j]; mn++) {\n            const new_val = parseInt(edgeArr[value]);\n            graph.addEdge(\n              graph.getNode(`${index}-${i}`),\n              graph.getNode(`${index - 1}-${j}`),\n              new_val ? new_val : 0\n            );\n            value++;\n\n          }\n        }\n      }\n      ++index;\n    }\n\n    this.setState({ levelsCount: count, graph: graph });\n  };\n\n  \n\n  render() {\n    return (\n      <div>\n        {this.state.graph.length == 0 ? (\n          <MatrixInput\n            matrix={this.state.array}\n            setMatrixFromInput={this.setMatrixFromInput}\n          />\n        ) : null}\n        {this.state.graph.length != 0 ? (\n          <GraphVisualizer\n            graph={this.state.graph}\n            count={this.state.levelsCount}\n          ></GraphVisualizer>\n        ) : null}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}